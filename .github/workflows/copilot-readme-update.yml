name: Copilot README Update

on:
  push:
    branches: [main]
  workflow_dispatch:

# Broader permissions so Copilot can later create PRs
permissions:
  issues: write
  contents: write
  pull-requests: write

jobs:
  create-copilot-issue:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Look for existing open Copilot README issue
        id: find_existing
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          existing_number=$(gh issue list \
            --search "in:title \"Review latest commit and update README\" state:open" \
            --json number --jq '.[0].number' || true)
          if [[ -n "$existing_number" && "$existing_number" != "null" ]]; then
            echo "existing_issue_number=$existing_number" >> "$GITHUB_OUTPUT"
            echo "Found existing issue #$existing_number"
          else
            echo "No existing issue found."
          fi

      - name: Create (or comment on) issue
        id: create_or_comment
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          EXISTING: ${{ steps.find_existing.outputs.existing_issue_number }}
        run: |
          if [[ -n "$EXISTING" ]]; then
            echo "Issue already exists (#$EXISTING); adding a comment instead of creating a new one."
            gh issue comment "$EXISTING" --body "New push to main detected. Please re-evaluate whether README updates are needed."
            echo "issue_number=$EXISTING" >> "$GITHUB_OUTPUT"
            echo "issue_url=$(gh issue view $EXISTING --json url --jq .url)" >> "$GITHUB_OUTPUT"
          else
            # Create new issue WITHOUT assignment first (use GITHUB_TOKEN just to create)
            issue_url=$(gh issue create \
              --title "ðŸ¤– Review latest commit and update README files if needed" \
              --body "$(cat <<'EOF'
                A push to main just occurred.

                Task:
                1. Compare the latest commit(s) to previously documented functionality.
                2. If changes affect usage, configuration, tooling, or developer experience:
                   - Update root README.md
                   - Update neovim/.config/neovim/README.md
                3. If no changes are needed, leave a comment explaining why.

                When you are ready, open a PR summarizing modifications with a clear commit scope.

                Context Hints for Copilot:
                - Focus on dev environment setup changes, tooling updates, aliases, shell/env adjustments, or Neovim plugin configuration shifts.
                - Ignore cosmetic changes (e.g., formatting-only or comment-only changes) unless they alter documented usage.

                EOF
                )" \
              --label "copilot" \
              --label "documentation" \
              --web > /dev/null 2>&1 || true)

            # Re-fetch (because gh issue create --web returns a browser open; fallback)
            # Safer approach: search the most recently created matching issue.
            new_issue_number=$(gh issue list --limit 1 --json number,title,createdAt \
              --search "in:title \"Review latest commit and update README\" state:open" \
              --jq '.[0].number')
            if [[ -z "$new_issue_number" ]]; then
              echo "Failed to determine new issue number"; exit 1
            fi
            issue_url=$(gh issue view "$new_issue_number" --json url --jq .url)
            echo "issue_number=$new_issue_number" >> "$GITHUB_OUTPUT"
            echo "issue_url=$issue_url" >> "$GITHUB_OUTPUT"
            echo "Created issue #$new_issue_number: $issue_url"
          fi

      - name: Wait briefly before assignment
        run: sleep 5

      - name: Assign Copilot with user PAT (ensures agent triggers)
        id: assign
        env:
          GH_TOKEN: ${{ secrets.COPILOT_ISSUE_ASSIGN }} # <-- PAT you create
          ISSUE_NUMBER: ${{ steps.create_or_comment.outputs.issue_number }}
        run: |
          if [[ -z "$ISSUE_NUMBER" ]]; then
            echo "No issue number available; cannot assign."
            exit 0
          fi
          echo "Assigning @copilot to issue #$ISSUE_NUMBER using PAT..."
          if gh issue edit "$ISSUE_NUMBER" --add-assignee "copilot"; then
            echo "Assignment successful."
          else
            echo "Assignment failed."
            exit 1
          fi

      - name: Add acknowledgment comment (optional)
        if: success()
        env:
          GH_TOKEN: ${{ secrets.COPILOT_ISSUE_ASSIGN }}
          ISSUE_NUMBER: ${{ steps.create_or_comment.outputs.issue_number }}
        run: |
          gh issue comment "$ISSUE_NUMBER" --body $'ðŸ¤– @copilot has been assigned.\n\nPlease proceed with the README evaluation workflow as described in the issue body.'

      - name: "Debug: Show final issue state"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ steps.create_or_comment.outputs.issue_number }}
        run: |
          gh issue view "$ISSUE_NUMBER" --json number,title,assignees,labels,state --jq '.'
